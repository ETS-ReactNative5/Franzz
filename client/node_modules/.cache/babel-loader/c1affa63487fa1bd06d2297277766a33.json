{"ast":null,"code":"var _jsxFileName = \"/home/hei/Documents/finals/JEK/client/src/components/Home/Channel/Modules/VideoSync/YoutubeVideoPlayer.js\";\nimport React, { useEffect } from 'react';\nimport YouTube from 'react-youtube';\nlet player;\n\nconst YoutubeVideoPlayer = ({\n  currentVideo,\n  changeVideoState,\n  paused,\n  played,\n  channel,\n  syncVideo,\n  timeStamp\n}) => {\n  function onReady(event) {\n    console.log('ready');\n    player = event.target;\n\n    if (timeStamp && player.b) {\n      if (Math.abs(player.getCurrentTime() - timeStamp) > 1) {\n        player.seekTo(timeStamp, true);\n      }\n    }\n\n    syncVideo(player.getCurrentTime(), channel);\n\n    if (paused) {\n      event.target.pauseVideo();\n    }\n\n    event.target.playVideo();\n  }\n\n  useEffect(() => {\n    if (paused && player && player.b) {\n      player.pauseVideo();\n    } else if (played && player && player.b) {\n      player.playVideo();\n    }\n  }, [paused, played, currentVideo]);\n  useEffect(() => {\n    if (timeStamp && player && player.b) {\n      if (Math.abs(player.getCurrentTime() - timeStamp) > 1) {\n        player.seekTo(timeStamp, true);\n      }\n    }\n  }, [timeStamp]);\n\n  function onPlayerStateChange(event) {\n    const state = event.data;\n    syncVideo(player.getCurrentTime(), channel);\n\n    if (state === 1) {\n      // if the video is playing\n      changeVideoState(currentVideo, channel, false, true);\n    } else if (state === 2) {\n      // if the video is paused\n      changeVideoState(currentVideo, channel, true, false);\n    } else if (state === -1) {\n      event.target.playVideo();\n    }\n  }\n\n  const opts = {\n    height: '520',\n    width: '840',\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  };\n  return React.createElement(YouTube, {\n    id: \"youtube-player\",\n    videoId: currentVideo,\n    opts: opts,\n    onReady: onReady,\n    onStateChange: onPlayerStateChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  });\n};\n\nexport default YoutubeVideoPlayer;","map":{"version":3,"sources":["/home/hei/Documents/finals/JEK/client/src/components/Home/Channel/Modules/VideoSync/YoutubeVideoPlayer.js"],"names":["React","useEffect","YouTube","player","YoutubeVideoPlayer","currentVideo","changeVideoState","paused","played","channel","syncVideo","timeStamp","onReady","event","console","log","target","b","Math","abs","getCurrentTime","seekTo","pauseVideo","playVideo","onPlayerStateChange","state","data","opts","height","width","playerVars","autoplay"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport YouTube from 'react-youtube';\n\nlet player;\n\nconst YoutubeVideoPlayer = ({\n  currentVideo, changeVideoState, paused, played, channel, syncVideo, timeStamp,\n}) => {\n  function onReady(event) {\n    console.log('ready');\n    player = event.target;\n    if (timeStamp && player.b) {\n      if (Math.abs(player.getCurrentTime() - timeStamp) > 1) {\n        player.seekTo(timeStamp, true);\n      }\n    }\n    syncVideo(player.getCurrentTime(), channel);\n    if (paused) {\n      event.target.pauseVideo();\n    }\n    event.target.playVideo();\n  }\n\n  useEffect(() => {\n    if (paused && player && player.b) {\n      player.pauseVideo();\n    } else if (played && player && player.b) {\n      player.playVideo();\n    }\n  }, [paused, played, currentVideo]);\n\n  useEffect(() => {\n    if (timeStamp && player && player.b) {\n      if (Math.abs(player.getCurrentTime() - timeStamp) > 1) {\n        player.seekTo(timeStamp, true);\n      }\n    }\n  }, [timeStamp]);\n\n  function onPlayerStateChange(event) {\n    const state = event.data;\n    syncVideo(player.getCurrentTime(), channel);\n    if (state === 1) { // if the video is playing\n      changeVideoState(currentVideo, channel, false, true);\n    } else if (state === 2) { // if the video is paused\n      changeVideoState(currentVideo, channel, true, false);\n    } else if (state === -1) {\n      event.target.playVideo();\n    }\n  }\n\n  const opts = {\n    height: '520',\n    width: '840',\n    playerVars: { // https://developers.google.com/youtube/player_parameters\n      autoplay: 1,\n    },\n  };\n\n  return (\n    <YouTube\n      id=\"youtube-player\"\n      videoId={currentVideo}\n      opts={opts}\n      onReady={onReady}\n      onStateChange={onPlayerStateChange}\n    />\n  );\n};\n\nexport default YoutubeVideoPlayer;\n"]},"metadata":{},"sourceType":"module"}