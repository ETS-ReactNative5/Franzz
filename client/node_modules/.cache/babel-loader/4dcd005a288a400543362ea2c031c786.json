{"ast":null,"code":"import axios from 'axios'; // eslint-disable-next-line import/prefer-default-export\n\nexport const useChat = (state, setState, socket) => {\n  const updateMaps = channel => {\n    const locationObj = {\n      channel,\n      location: state.center,\n      authorization: state.authorization\n    };\n    socket.emit('update maps', locationObj);\n  };\n\n  const emitSendMessage = (message, video, image) => {\n    const channelID = state.currentChannel;\n    const messageObj = {\n      message,\n      channelID,\n      authorization: state.authorization,\n      username: state.username,\n      video,\n      image\n    };\n    socket.emit('message', messageObj, newMessageObj => {\n      setState(prev => ({ ...prev,\n        channelStates: { ...prev.channelStates,\n          [channelID]: { ...prev.channelStates[channelID],\n            messages: prev.channelStates[channelID].messages.concat(newMessageObj)\n          }\n        }\n      }));\n    });\n  };\n\n  const emitCreateChannel = channelName => {\n    const createChannelObj = {\n      channelName,\n      authorization: state.authorization\n    };\n    socket.emit('create channel', createChannelObj, channelData => {\n      const {\n        data,\n        messages\n      } = channelData;\n      const {\n        channel\n      } = data; // initializes a folder in the photo cloud for this channel\n\n      const request = {\n        channelId: `${channel}/chat`,\n        albumName: false\n      };\n      axios.post('http://localhost:8001/api/photos/createEmptyFolder', {\n        body: JSON.stringify(request)\n      });\n      updateMaps(channel);\n      setState(prev => ({ ...prev,\n        channelStates: { ...prev.channelStates,\n          [channel]: { ...data,\n            messages\n          }\n        }\n      }));\n    });\n  };\n\n  const emitJoinChannel = channelLink => {\n    const joinChannelObj = {\n      channelLink,\n      authorization: state.authorization\n    };\n    socket.emit('join channel', joinChannelObj, channelData => {\n      const {\n        error,\n        data,\n        messages\n      } = channelData;\n\n      if (!error) {\n        const {\n          channel\n        } = data;\n        updateMaps(channel);\n        setState(prev => ({ ...prev,\n          channelStates: { ...prev.channelStates,\n            [channel]: { ...data,\n              messages\n            }\n          }\n        }));\n      }\n    });\n  };\n\n  return {\n    emitSendMessage,\n    emitJoinChannel,\n    emitCreateChannel\n  };\n};","map":{"version":3,"sources":["/home/hei/Documents/finals/JEK/client/src/hooks/useChat.js"],"names":["axios","useChat","state","setState","socket","updateMaps","channel","locationObj","location","center","authorization","emit","emitSendMessage","message","video","image","channelID","currentChannel","messageObj","username","newMessageObj","prev","channelStates","messages","concat","emitCreateChannel","channelName","createChannelObj","channelData","data","request","channelId","albumName","post","body","JSON","stringify","emitJoinChannel","channelLink","joinChannelObj","error"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const useChat = (state, setState, socket) => {\n  const updateMaps = (channel) => {\n    const locationObj = {\n      channel,\n      location: state.center,\n      authorization: state.authorization,\n    };\n    socket.emit('update maps', locationObj);\n  };\n\n  const emitSendMessage = (message, video, image) => {\n    const channelID = state.currentChannel;\n    const messageObj = {\n      message,\n      channelID,\n      authorization: state.authorization,\n      username: state.username,\n      video,\n      image,\n    };\n    socket.emit('message', messageObj, (newMessageObj) => {\n      setState((prev) => (\n        {\n          ...prev,\n          channelStates: {\n            ...prev.channelStates,\n            [channelID]: {\n              ...prev.channelStates[channelID],\n              messages: prev.channelStates[channelID].messages.concat(newMessageObj),\n            },\n          },\n        }));\n    });\n  };\n\n  const emitCreateChannel = (channelName) => {\n    const createChannelObj = {\n      channelName,\n      authorization: state.authorization,\n    };\n    socket.emit('create channel', createChannelObj, (channelData) => {\n      const { data, messages } = channelData;\n      const { channel } = data;\n\n      // initializes a folder in the photo cloud for this channel\n      const request = { channelId: `${channel}/chat`, albumName: false };\n      axios.post('http://localhost:8001/api/photos/createEmptyFolder', { body: JSON.stringify(request) });\n\n      updateMaps(channel);\n\n      setState((prev) => (\n        {\n          ...prev,\n          channelStates: {\n            ...prev.channelStates,\n            [channel]: {\n              ...data,\n              messages,\n            },\n          },\n        }\n      ));\n    });\n  };\n\n  const emitJoinChannel = (channelLink) => {\n    const joinChannelObj = {\n      channelLink,\n      authorization: state.authorization,\n    };\n    socket.emit('join channel', joinChannelObj, (channelData) => {\n      const { error, data, messages } = channelData;\n      if (!error) {\n        const { channel } = data;\n\n        updateMaps(channel);\n\n        setState((prev) => (\n          {\n            ...prev,\n            channelStates: {\n              ...prev.channelStates,\n              [channel]: {\n                ...data,\n                messages,\n              },\n            },\n          }\n        ));\n      }\n    });\n  };\n\n  return {\n    emitSendMessage,\n    emitJoinChannel,\n    emitCreateChannel,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}