{"ast":null,"code":"var _jsxFileName = \"/home/hei/Documents/finals/JEK/client/src/components/Home/Channel/Container/Chat/Input.js\";\n\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n\n/* eslint-disable jsx-a11y/label-has-associated-control */\n\n/* eslint-disable jsx-a11y/control-has-associated-label */\n\n/* eslint-disable react/prop-types */\nimport React, { useState } from 'react';\nimport { LinearProgress } from '@material-ui/core'; // import { handleFiles } from '../../Modules/Photos/Scripts/DragAndDropPhotos';\n\nimport { serverURL } from '../../../../../utils/config';\n\nconst Input = ({\n  message,\n  setMessage,\n  emitSendMessage,\n  channel,\n  setShowEmojiPicker\n}) => {\n  const [showProgress, toggleProgress] = useState(false);\n\n  const uploadFile = async (file, channelId, albumName, emitSendMessage, viewUpdatedAlbum) => {\n    const url = `${serverURL}/api/photos/uploadPhotos`;\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('channel', `${channelId}`);\n    let path = `albums/${albumName.replace(/ /g, '-')}`;\n\n    if (albumName === 'chat') {\n      path = 'chat';\n    }\n\n    formData.append('album', path);\n    fetch(url, {\n      method: 'POST',\n      body: formData\n    }) // send the url of image/video to socket to be used for messaging\n    .then(res => res.json()).then(data => {\n      if (albumName === 'chat') {\n        emitSendMessage(data.result.url, data.video, data.image);\n      } else {\n        setTimeout(() => {\n          viewUpdatedAlbum();\n        }, 3000);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const handleFiles = (files, channelId, albumName, emitSendMessage, viewUpdatedAlbum) => {\n    [...files].forEach(file => {\n      uploadFile(file, channelId, albumName, emitSendMessage, viewUpdatedAlbum);\n    });\n  };\n\n  const sendMessage = e => {\n    e.preventDefault();\n    toggleProgress(true);\n    emitSendMessage(message);\n    toggleProgress(false);\n    setMessage('');\n  };\n\n  const sendFileMessage = e => {\n    toggleProgress(true);\n    handleFiles(e.target.files, channel, 'chat', emitSendMessage);\n    setTimeout(() => {\n      toggleProgress(false);\n    }, 1000);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, showProgress && React.createElement(LinearProgress, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    id: \"messaging-input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"textarea\", {\n    className: \"chatInputBox\",\n    type: \"text\",\n    onChange: e => setMessage(e.target.value),\n    value: message,\n    onKeyPress: e => e.key === 'Enter' ? sendMessage(e) : null,\n    placeholder: \"Type something to send...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"emojiPickerButton\",\n    onClick: () => setShowEmojiPicker(prev => !prev),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"file\",\n    id: \"fileElem\",\n    multiple: true,\n    accept: \"image/*\",\n    onChange: e => sendFileMessage(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"button\",\n    htmlFor: \"fileElem\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  })));\n};\n\nexport default Input;","map":{"version":3,"sources":["/home/hei/Documents/finals/JEK/client/src/components/Home/Channel/Container/Chat/Input.js"],"names":["React","useState","LinearProgress","serverURL","Input","message","setMessage","emitSendMessage","channel","setShowEmojiPicker","showProgress","toggleProgress","uploadFile","file","channelId","albumName","viewUpdatedAlbum","url","formData","FormData","append","path","replace","fetch","method","body","then","res","json","data","result","video","image","setTimeout","catch","err","console","log","handleFiles","files","forEach","sendMessage","e","preventDefault","sendFileMessage","target","value","key","prev"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable jsx-a11y/control-has-associated-label */\n/* eslint-disable react/prop-types */\nimport React, { useState } from 'react';\nimport { LinearProgress } from '@material-ui/core';\n// import { handleFiles } from '../../Modules/Photos/Scripts/DragAndDropPhotos';\n\nimport { serverURL } from '../../../../../utils/config';\n\nconst Input = ({\n  message, setMessage, emitSendMessage, channel, setShowEmojiPicker,\n}) => {\n  const [showProgress, toggleProgress] = useState(false);\n\n  const uploadFile = async (file, channelId, albumName, emitSendMessage, viewUpdatedAlbum) => {\n    const url = `${serverURL}/api/photos/uploadPhotos`;\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('channel', `${channelId}`);\n    let path = `albums/${albumName.replace(/ /g, '-')}`;\n    if (albumName === 'chat') {\n      path = 'chat';\n    }\n    formData.append('album', path);\n\n\n    fetch(url, {\n      method: 'POST',\n      body: formData,\n    })\n      // send the url of image/video to socket to be used for messaging\n      .then((res) => res.json())\n      .then((data) => {\n        if (albumName === 'chat') {\n          emitSendMessage(data.result.url, data.video, data.image);\n        } else {\n          setTimeout(() => {\n            viewUpdatedAlbum();\n          }, 3000);\n        }\n      })\n      .catch((err) => { console.log(err); });\n  };\n\n  const handleFiles = (files, channelId, albumName, emitSendMessage, viewUpdatedAlbum) => {\n    [...files].forEach((file) => {\n      uploadFile(file, channelId, albumName, emitSendMessage, viewUpdatedAlbum);\n    });\n  };\n\n  const sendMessage = (e) => {\n    e.preventDefault();\n    toggleProgress(true);\n    emitSendMessage(message);\n    toggleProgress(false);\n    setMessage('');\n  };\n\n  const sendFileMessage = (e) => {\n    toggleProgress(true);\n    handleFiles(e.target.files, channel, 'chat', emitSendMessage);\n    setTimeout(() => {\n      toggleProgress(false);\n    }, 1000);\n  };\n\n  return (\n    <div>\n      {showProgress && <LinearProgress />}\n      <form id=\"messaging-input\">\n        <textarea\n          className=\"chatInputBox\"\n          type=\"text\"\n          onChange={(e) => setMessage(e.target.value)}\n          value={message}\n          onKeyPress={(e) => (e.key === 'Enter' ? sendMessage(e) : null)}\n          placeholder=\"Type something to send...\"\n        />\n        <div className=\"emojiPickerButton\" onClick={() => setShowEmojiPicker((prev) => !prev)} />\n        <input type=\"file\" id=\"fileElem\" multiple accept=\"image/*\" onChange={(e) => sendFileMessage(e)} />\n        <label className=\"button\" htmlFor=\"fileElem\" />\n      </form>\n    </div>\n  );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}