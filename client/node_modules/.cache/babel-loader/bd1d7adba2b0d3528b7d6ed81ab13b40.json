{"ast":null,"code":"import _defineProperty from\"/home/hei/Documents/finals/JEK/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/home/hei/Documents/finals/JEK/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import axios from'axios';import{serverURL}from'../utils/config';// eslint-disable-next-line import/prefer-default-export\nexport var useChat=function useChat(state,setState,socket){var updateMaps=function updateMaps(channel){var locationObj={channel:channel,location:state.center,authorization:state.authorization};socket.emit('update maps',locationObj);};var emitSendMessage=function emitSendMessage(message,video,image){var channelID=state.currentChannel;var messageObj={message:message,channelID:channelID,authorization:state.authorization,username:state.username,video:video,image:image};socket.emit('message',messageObj,function(newMessageObj){setState(function(prev){return _objectSpread({},prev,{channelStates:_objectSpread({},prev.channelStates,_defineProperty({},channelID,_objectSpread({},prev.channelStates[channelID],{messages:prev.channelStates[channelID].messages.concat(newMessageObj)})))});});});};var emitCreateChannel=function emitCreateChannel(channelName){var createChannelObj={channelName:channelName,authorization:state.authorization};socket.emit('create channel',createChannelObj,function(channelData){var data=channelData.data,messages=channelData.messages;var channel=data.channel;// initializes a folder in the photo cloud for this channel\nvar request={channelId:\"\".concat(channel,\"/chat\"),albumName:false};axios.post(\"\".concat(serverURL,\"/api/photos/createEmptyFolder\"),{body:JSON.stringify(request)});updateMaps(channel);setState(function(prev){return _objectSpread({},prev,{videoStates:_objectSpread({},prev.videoStates,_defineProperty({},channel,{url:'5mGuCdlCcNM'})),channelStates:_objectSpread({},prev.channelStates,_defineProperty({},channel,_objectSpread({},data,{messages:messages})))});});});};var emitJoinChannel=function emitJoinChannel(channelLink){var joinChannelObj={channelLink:channelLink,authorization:state.authorization};socket.emit('join channel',joinChannelObj,function(channelData){var error=channelData.error,data=channelData.data,messages=channelData.messages;if(!error){var channel=data.channel;updateMaps(channel);setState(function(prev){return _objectSpread({},prev,{videoStates:_objectSpread({},prev.videoStates,_defineProperty({},channel,{url:'5mGuCdlCcNM'})),channelStates:_objectSpread({},prev.channelStates,_defineProperty({},channel,_objectSpread({},data,{messages:messages})))});});}});};return{emitSendMessage:emitSendMessage,emitJoinChannel:emitJoinChannel,emitCreateChannel:emitCreateChannel};};","map":{"version":3,"sources":["/home/hei/Documents/finals/JEK/client/src/hooks/useChat.js"],"names":["axios","serverURL","useChat","state","setState","socket","updateMaps","channel","locationObj","location","center","authorization","emit","emitSendMessage","message","video","image","channelID","currentChannel","messageObj","username","newMessageObj","prev","channelStates","messages","concat","emitCreateChannel","channelName","createChannelObj","channelData","data","request","channelId","albumName","post","body","JSON","stringify","videoStates","url","emitJoinChannel","channelLink","joinChannelObj","error"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { serverURL } from '../utils/config';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const useChat = (state, setState, socket) => {\n  const updateMaps = (channel) => {\n    const locationObj = {\n      channel,\n      location: state.center,\n      authorization: state.authorization,\n    };\n    socket.emit('update maps', locationObj);\n  };\n\n  const emitSendMessage = (message, video, image) => {\n    const channelID = state.currentChannel;\n    const messageObj = {\n      message,\n      channelID,\n      authorization: state.authorization,\n      username: state.username,\n      video,\n      image,\n    };\n    socket.emit('message', messageObj, (newMessageObj) => {\n      setState((prev) => (\n        {\n          ...prev,\n          channelStates: {\n            ...prev.channelStates,\n            [channelID]: {\n              ...prev.channelStates[channelID],\n              messages: prev.channelStates[channelID].messages.concat(newMessageObj),\n            },\n          },\n        }));\n    });\n  };\n\n  const emitCreateChannel = (channelName) => {\n    const createChannelObj = {\n      channelName,\n      authorization: state.authorization,\n    };\n    socket.emit('create channel', createChannelObj, (channelData) => {\n      const { data, messages } = channelData;\n      const { channel } = data;\n\n      // initializes a folder in the photo cloud for this channel\n      const request = { channelId: `${channel}/chat`, albumName: false };\n      axios.post(`${serverURL}/api/photos/createEmptyFolder`, { body: JSON.stringify(request) });\n\n      updateMaps(channel);\n\n      setState((prev) => (\n        {\n          ...prev,\n          videoStates: {\n            ...prev.videoStates,\n            [channel]: {\n              url: '5mGuCdlCcNM',\n            },\n          },\n          channelStates: {\n            ...prev.channelStates,\n            [channel]: {\n              ...data,\n              messages,\n            },\n          },\n        }\n      ));\n    });\n  };\n\n  const emitJoinChannel = (channelLink) => {\n    const joinChannelObj = {\n      channelLink,\n      authorization: state.authorization,\n    };\n    socket.emit('join channel', joinChannelObj, (channelData) => {\n      const { error, data, messages } = channelData;\n      if (!error) {\n        const { channel } = data;\n\n        updateMaps(channel);\n        setState((prev) => (\n          {\n            ...prev,\n            videoStates: {\n              ...prev.videoStates,\n              [channel]: {\n                url: '5mGuCdlCcNM',\n              },\n            },\n            channelStates: {\n              ...prev.channelStates,\n              [channel]: {\n                ...data,\n                messages,\n              },\n            },\n          }\n        ));\n      }\n    });\n  };\n\n  return {\n    emitSendMessage,\n    emitJoinChannel,\n    emitCreateChannel,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}