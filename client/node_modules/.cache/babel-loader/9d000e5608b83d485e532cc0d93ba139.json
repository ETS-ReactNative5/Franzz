{"ast":null,"code":"import _slicedToArray from \"/home/hei/Documents/finals/JEK/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/hei/Documents/finals/JEK/client/src/components/Channel/Container/Canvas/Canvas.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport CanvasDraw from 'react-canvas-draw';\nimport classNames from './Canvas.css';\n\nconst Canvas = () => {\n  const _useState = useState({\n    color: '#ffc600',\n    width: 400,\n    height: 400,\n    brushRadius: 10,\n    lazyRadius: 12\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        canvas = _useState2[0],\n        setCanvas = _useState2[1];\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"React Canvas Draw\"), React.createElement(\"iframe\", {\n    title: \"GitHub link\",\n    src: \"https://ghbtns.com/github-btn.html?user=embiem&repo=react-canvas-draw&type=star&count=true\",\n    frameBorder: \"0\",\n    scrolling: \"0\",\n    width: \"160px\",\n    height: \"30px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"default\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"This is a simple\", ' ', React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, '<CanvasDraw />'), ' ', \"component with default values.\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Try it out! Draw on this white canvas:\"), React.createElement(CanvasDraw, {\n    onChange: () => console.log('onChange'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Custom Brush-Color\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Let's spice things up by using custom brush colors\", ' ', React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, '<CanvasDraw brushColor={canvas.color} />'), \". We randomly change them every 2 seconds. But you could easily use a color-picker!\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Current color:\", ' ', React.createElement(\"div\", {\n    style: {\n      display: 'inline-block',\n      width: '24px',\n      height: '24px',\n      backgroundColor: canvas.color,\n      border: '1px solid #272727'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  })), React.createElement(CanvasDraw, {\n    brushColor: canvas.color,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Background Image\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"You can also set the `imgSrc` prop to draw on a background-image.\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"It will automatically resize to fit the canvas and centered vertically & horizontally.\"), React.createElement(CanvasDraw, {\n    brushColor: \"rgba(155,12,60,0.3)\",\n    imgSrc: \"https://upload.wikimedia.org/wikipedia/commons/a/a1/Nepalese_Mhapuja_Mandala.jpg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Hide UI\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"To hide the UI elements, set the `hideInterface` prop. You can also hide the grid with the `hideGrid` prop.\"), React.createElement(CanvasDraw, {\n    hideInterface: true,\n    hideGrid: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Save & Load\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"This part got me most excited. Very easy to use saving and loading of drawings. It even comes with a customizable loading speed to control whether your drawing should load instantly (loadTimeOffset = 0) or appear after some time (loadTimeOffset > 0)\", ' ', React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, '<CanvasDraw loadTimeOffset={10} />')), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Try it out! Draw something, hit \\\"Save\\\" and then \\\"Load\\\".\"), React.createElement(\"div\", {\n    className: classNames.tools,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => {\n      localStorage.setItem('savedDrawing', saveableCanvas.getSaveData());\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Save\"), React.createElement(\"button\", {\n    onClick: () => {\n      saveableCanvas.clear();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"Clear\"), React.createElement(\"button\", {\n    onClick: () => {\n      saveableCanvas.undo();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Undo\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, \"Width:\"), React.createElement(\"input\", {\n    type: \"number\",\n    value: canvas.width,\n    onChange: e => setCanvas({\n      width: parseInt(e.target.value, 10)\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"Height:\"), React.createElement(\"input\", {\n    type: \"number\",\n    value: canvas.height,\n    onChange: e => setCanvas({\n      height: parseInt(e.target.value, 10)\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, \"Brush-Radius:\"), React.createElement(\"input\", {\n    type: \"number\",\n    value: canvas.brushRadius,\n    onChange: e => setCanvas({\n      brushRadius: parseInt(e.target.value, 10)\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, \"Lazy-Radius:\"), React.createElement(\"input\", {\n    type: \"number\",\n    value: canvas.lazyRadius,\n    onChange: e => setCanvas({\n      lazyRadius: parseInt(e.target.value, 10)\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }))), React.createElement(CanvasDraw, {\n    ref: canvasDraw => this.saveableCanvas = canvasDraw,\n    brushColor: canvas.color,\n    brushRadius: canvas.brushRadius,\n    lazyRadius: canvas.lazyRadius,\n    canvasWidth: canvas.width,\n    canvasHeight: canvas.height,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, \"The following is a disabled canvas with a hidden grid that we use to load & show your saved drawing.\"), React.createElement(\"button\", {\n    onClick: () => {\n      loadableCanvas.loadSaveData(localStorage.getItem('savedDrawing'));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, \"Load what you saved previously into the following canvas. Either by calling `loadSaveData()` on the component's reference or passing it the `saveData` prop:\"), React.createElement(CanvasDraw, {\n    disabled: true,\n    hideGrid: true,\n    ref: canvasDraw => loadableCanvas = canvasDraw,\n    saveData: localStorage.getItem('savedDrawing'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, \"The saving & loading also takes different dimensions into account. Change the width & height, draw something and save it and then load it into the disabled canvas. It will load your previously saved masterpiece scaled to the current canvas dimensions.\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, \"That's it for now! Take a look at the\", ' ', React.createElement(\"a\", {\n    href: \"https://github.com/mBeierl/react-canvas-draw/tree/master/demo/src\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, \"source code of these examples\"), \".\"));\n};\n\nexport default Canvas;","map":{"version":3,"sources":["/home/hei/Documents/finals/JEK/client/src/components/Channel/Container/Canvas/Canvas.js"],"names":["React","useState","useRef","useEffect","CanvasDraw","classNames","Canvas","color","width","height","brushRadius","lazyRadius","canvas","setCanvas","console","log","display","backgroundColor","border","tools","localStorage","setItem","saveableCanvas","getSaveData","clear","undo","e","parseInt","target","value","canvasDraw","loadableCanvas","loadSaveData","getItem"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport CanvasDraw from 'react-canvas-draw';\n\nimport classNames from './Canvas.css';\n\nconst Canvas = () => {\n  const [canvas, setCanvas] = useState({\n    color: '#ffc600',\n    width: 400,\n    height: 400,\n    brushRadius: 10,\n    lazyRadius: 12,\n  });\n\n  return (\n    <div>\n      <h1>React Canvas Draw</h1>\n      <iframe\n        title=\"GitHub link\"\n        src=\"https://ghbtns.com/github-btn.html?user=embiem&repo=react-canvas-draw&type=star&count=true\"\n        frameBorder=\"0\"\n        scrolling=\"0\"\n        width=\"160px\"\n        height=\"30px\"\n      />\n      <h2>default</h2>\n      <p>\n          This is a simple\n        {' '}\n        <span>{'<CanvasDraw />'}</span>\n        {' '}\ncomponent with\n          default values.\n      </p>\n      <p>Try it out! Draw on this white canvas:</p>\n      <CanvasDraw onChange={() => console.log('onChange')} />\n      <h2>Custom Brush-Color</h2>\n      <p>\n          Let's spice things up by using custom brush colors\n        {' '}\n        <span>{'<CanvasDraw brushColor={canvas.color} />'}</span>\n. We\n          randomly change them every 2 seconds. But you could easily use a\n          color-picker!\n      </p>\n      <div>\n          Current color:\n        {' '}\n        <div\n          style={{\n            display: 'inline-block',\n            width: '24px',\n            height: '24px',\n            backgroundColor: canvas.color,\n            border: '1px solid #272727',\n          }}\n        />\n      </div>\n      <CanvasDraw brushColor={canvas.color} />\n      <h2>Background Image</h2>\n      <p>You can also set the `imgSrc` prop to draw on a background-image.</p>\n      <p>\n          It will automatically resize to fit the canvas and centered vertically\n          & horizontally.\n      </p>\n      <CanvasDraw\n        brushColor=\"rgba(155,12,60,0.3)\"\n        imgSrc=\"https://upload.wikimedia.org/wikipedia/commons/a/a1/Nepalese_Mhapuja_Mandala.jpg\"\n      />\n      <h2>Hide UI</h2>\n      <p>To hide the UI elements, set the `hideInterface` prop. You can also hide the grid with the `hideGrid` prop.</p>\n      <CanvasDraw hideInterface hideGrid />\n      <h2>Save & Load</h2>\n      <p>\n          This part got me most excited. Very easy to use saving and loading of\n          drawings. It even comes with a customizable loading speed to control\n          whether your drawing should load instantly (loadTimeOffset = 0) or\n          appear after some time (loadTimeOffset > 0)\n        {' '}\n        <span>{'<CanvasDraw loadTimeOffset={10} />'}</span>\n      </p>\n      <p>Try it out! Draw something, hit \"Save\" and then \"Load\".</p>\n      <div className={classNames.tools}>\n        <button\n          onClick={() => {\n            localStorage.setItem(\n              'savedDrawing',\n              saveableCanvas.getSaveData(),\n            );\n          }}\n        >\n            Save\n        </button>\n        <button\n          onClick={() => {\n            saveableCanvas.clear();\n          }}\n        >\n            Clear\n        </button>\n        <button\n          onClick={() => {\n            saveableCanvas.undo();\n          }}\n        >\n            Undo\n        </button>\n        <div>\n          <label>Width:</label>\n          <input\n            type=\"number\"\n            value={canvas.width}\n            onChange={(e) => setCanvas({ width: parseInt(e.target.value, 10) })}\n          />\n        </div>\n        <div>\n          <label>Height:</label>\n          <input\n            type=\"number\"\n            value={canvas.height}\n            onChange={(e) => setCanvas({ height: parseInt(e.target.value, 10) })}\n          />\n        </div>\n        <div>\n          <label>Brush-Radius:</label>\n          <input\n            type=\"number\"\n            value={canvas.brushRadius}\n            onChange={(e) => setCanvas({ brushRadius: parseInt(e.target.value, 10) })}\n          />\n        </div>\n        <div>\n          <label>Lazy-Radius:</label>\n          <input\n            type=\"number\"\n            value={canvas.lazyRadius}\n            onChange={(e) => setCanvas({ lazyRadius: parseInt(e.target.value, 10) })}\n          />\n        </div>\n      </div>\n      <CanvasDraw\n        ref={(canvasDraw) => (this.saveableCanvas = canvasDraw)}\n        brushColor={canvas.color}\n        brushRadius={canvas.brushRadius}\n        lazyRadius={canvas.lazyRadius}\n        canvasWidth={canvas.width}\n        canvasHeight={canvas.height}\n      />\n      <p>\n          The following is a disabled canvas with a hidden grid that we use to\n          load & show your saved drawing.\n      </p>\n      <button\n        onClick={() => {\n          loadableCanvas.loadSaveData(\n            localStorage.getItem('savedDrawing'),\n          );\n        }}\n      >\n          Load what you saved previously into the following canvas. Either by\n          calling `loadSaveData()` on the component's reference or passing it\n          the `saveData` prop:\n      </button>\n      <CanvasDraw\n        disabled\n        hideGrid\n        ref={(canvasDraw) => (loadableCanvas = canvasDraw)}\n        saveData={localStorage.getItem('savedDrawing')}\n      />\n      <p>\n          The saving & loading also takes different dimensions into account.\n          Change the width & height, draw something and save it and then load it\n          into the disabled canvas. It will load your previously saved\n          masterpiece scaled to the current canvas dimensions.\n      </p>\n      <p>\n          That's it for now! Take a look at the\n        {' '}\n        <a href=\"https://github.com/mBeierl/react-canvas-draw/tree/master/demo/src\">\n            source code of these examples\n        </a>\n          .\n      </p>\n    </div>\n  );\n};\n\nexport default Canvas;\n"]},"metadata":{},"sourceType":"module"}