{"ast":null,"code":"var _jsxFileName = \"/home/hei/Documents/finals/JEK/client/src/components/Home/Channel/Container/Chat/TextContainer.js\";\n\n/* eslint-disable react/prop-types */\nimport React, { useState } from 'react';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport { LinearProgress } from '@material-ui/core';\nimport Message from './Message';\nimport { serverURL } from '../../../../../utils/config';\nimport './TextContainer.css'; // Scripting work for adding photos to the cloud through the text container\n\nimport useChangeHighlightClass from '../../../../../hooks/useHighlightClass'; // import { preventDefaults, handleDrop } from '../../Modules/Photos/Scripts/DragAndDropPhotos';\n\nconst TextContainer = ({\n  messages,\n  deleteMessage,\n  channelId,\n  emitSendMessage,\n  currentUser\n}) => {\n  // Used to highlight the box when dragging photos in\n  const {\n    highlightClass,\n    changeHighlightClass\n  } = useChangeHighlightClass('');\n  const [showProgress, toggleProgress] = useState(false);\n\n  const preventDefaults = e => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const handleDrop = (e, channelId, albumName, emitSendMessage) => {\n    // get emitsendmessage to be passed through as a function\n    preventDefaults(e);\n    const dt = e.dataTransfer;\n    const {\n      files\n    } = dt;\n    handleFiles(files, channelId, albumName, emitSendMessage);\n  };\n\n  const uploadFile = async (file, channelId, albumName, emitSendMessage, viewUpdatedAlbum) => {\n    const url = `${serverURL}/api/photos/uploadPhotos`;\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('channel', `${channelId}`);\n    let path = `albums/${albumName.replace(/ /g, '-')}`;\n\n    if (albumName === 'chat') {\n      path = 'chat';\n    }\n\n    formData.append('album', path);\n    fetch(url, {\n      method: 'POST',\n      body: formData\n    }) // send the url of image/video to socket to be used for messaging\n    .then(res => res.json()).then(data => {\n      if (albumName === 'chat') {\n        emitSendMessage(data.result.url, data.video, data.image);\n      } else {\n        setTimeout(() => {\n          viewUpdatedAlbum();\n        }, 3000);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const handleFiles = (files, channelId, albumName, emitSendMessage, viewUpdatedAlbum) => {\n    [...files].forEach(file => {\n      uploadFile(file, channelId, albumName, emitSendMessage, viewUpdatedAlbum);\n    });\n  };\n\n  const formattedMessages = messages.map(msg => React.createElement(Message, {\n    key: msg.id,\n    id: msg.id,\n    message: msg.message,\n    created: msg.created,\n    username: msg.user.username,\n    currentUser: currentUser,\n    isCurrent: msg.user.id === currentUser,\n    userId: msg.user.id,\n    deleteMessage: deleteMessage,\n    video: msg.video,\n    image: msg.image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })); // Changes the class depending on the event\n  // and tracks event\n\n  function boxEvent(e) {\n    changeHighlightClass(e.type);\n    preventDefaults(e);\n  }\n\n  function dropFile(e) {\n    preventDefaults(e);\n    toggleProgress(true);\n    changeHighlightClass(e.type);\n    handleDrop(e, channelId, 'chat', emitSendMessage);\n    setTimeout(() => {\n      toggleProgress(false);\n    }, 2000);\n  }\n\n  return React.createElement(\"div\", {\n    onDragEnter: boxEvent,\n    onDragLeave: boxEvent,\n    onDragOver: boxEvent,\n    onDrop: dropFile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(ScrollToBottom, {\n    id: \"drop-area\",\n    className: `textContainer ${highlightClass}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, formattedMessages), showProgress && React.createElement(LinearProgress, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }));\n};\n\nexport default TextContainer;","map":{"version":3,"sources":["/home/hei/Documents/finals/JEK/client/src/components/Home/Channel/Container/Chat/TextContainer.js"],"names":["React","useState","ScrollToBottom","LinearProgress","Message","serverURL","useChangeHighlightClass","TextContainer","messages","deleteMessage","channelId","emitSendMessage","currentUser","highlightClass","changeHighlightClass","showProgress","toggleProgress","preventDefaults","e","preventDefault","stopPropagation","handleDrop","albumName","dt","dataTransfer","files","handleFiles","uploadFile","file","viewUpdatedAlbum","url","formData","FormData","append","path","replace","fetch","method","body","then","res","json","data","result","video","image","setTimeout","catch","err","console","log","forEach","formattedMessages","map","msg","id","message","created","user","username","boxEvent","type","dropFile"],"mappings":"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","sourcesContent":["/* eslint-disable react/prop-types */\nimport React, { useState } from 'react';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport { LinearProgress } from '@material-ui/core';\nimport Message from './Message';\n\nimport { serverURL } from '../../../../../utils/config';\n\nimport './TextContainer.css';\n\n// Scripting work for adding photos to the cloud through the text container\nimport useChangeHighlightClass from '../../../../../hooks/useHighlightClass';\n// import { preventDefaults, handleDrop } from '../../Modules/Photos/Scripts/DragAndDropPhotos';\n\nconst TextContainer = ({\n  messages, deleteMessage, channelId, emitSendMessage, currentUser,\n}) => {\n  // Used to highlight the box when dragging photos in\n  const { highlightClass, changeHighlightClass } = useChangeHighlightClass('');\n  const [showProgress, toggleProgress] = useState(false);\n\n  const preventDefaults = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const handleDrop = (e, channelId, albumName, emitSendMessage) => {\n    // get emitsendmessage to be passed through as a function\n    preventDefaults(e);\n    const dt = e.dataTransfer;\n    const { files } = dt;\n\n    handleFiles(files, channelId, albumName, emitSendMessage);\n  };\n\n  const uploadFile = async (file, channelId, albumName, emitSendMessage, viewUpdatedAlbum) => {\n    const url = `${serverURL}/api/photos/uploadPhotos`;\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('channel', `${channelId}`);\n    let path = `albums/${albumName.replace(/ /g, '-')}`;\n    if (albumName === 'chat') {\n      path = 'chat';\n    }\n    formData.append('album', path);\n\n\n    fetch(url, {\n      method: 'POST',\n      body: formData,\n    })\n      // send the url of image/video to socket to be used for messaging\n      .then((res) => res.json())\n      .then((data) => {\n        if (albumName === 'chat') {\n          emitSendMessage(data.result.url, data.video, data.image);\n        } else {\n          setTimeout(() => {\n            viewUpdatedAlbum();\n          }, 3000);\n        }\n      })\n      .catch((err) => { console.log(err); });\n  };\n\n  const handleFiles = (files, channelId, albumName, emitSendMessage, viewUpdatedAlbum) => {\n    [...files].forEach((file) => {\n      uploadFile(file, channelId, albumName, emitSendMessage, viewUpdatedAlbum);\n    });\n  };\n\n  const formattedMessages = messages.map((msg) => (\n    <Message\n      key={msg.id}\n      id={msg.id}\n      message={msg.message}\n      created={msg.created}\n      username={msg.user.username}\n      currentUser={currentUser}\n      isCurrent={msg.user.id === currentUser}\n      userId={msg.user.id}\n      deleteMessage={deleteMessage}\n      video={msg.video}\n      image={msg.image}\n    />\n  ));\n\n  // Changes the class depending on the event\n  // and tracks event\n  function boxEvent(e) {\n    changeHighlightClass(e.type);\n    preventDefaults(e);\n  }\n\n  function dropFile(e) {\n    preventDefaults(e);\n    toggleProgress(true);\n    changeHighlightClass(e.type);\n    handleDrop(e, channelId, 'chat', emitSendMessage);\n    setTimeout(() => {\n      toggleProgress(false);\n    }, 2000);\n  }\n\n\n  return (\n    <div\n      onDragEnter={boxEvent}\n      onDragLeave={boxEvent}\n      onDragOver={boxEvent}\n      onDrop={dropFile}\n    >\n      <ScrollToBottom\n        id=\"drop-area\"\n        className={`textContainer ${highlightClass}`}\n      >\n        {formattedMessages}\n      </ScrollToBottom>\n      {showProgress && <LinearProgress />}\n    </div>\n  );\n};\n\nexport default TextContainer;\n"]},"metadata":{},"sourceType":"module"}