{"ast":null,"code":"import _objectSpread from \"/home/hei/Documents/finals/JEK/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/hei/Documents/finals/JEK/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/hei/Documents/finals/JEK/client/src/components/Channel/Container/Canvas/Canvas.js\";\nimport React, { useState, useRef, useEffect } from 'react';\n\nconst Canvas = () => {\n  const canvasRef = useRef(null);\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        context = _useState2[0],\n        setContext = _useState2[1];\n\n  const _useState3 = useState('black'),\n        _useState4 = _slicedToArray(_useState3, 2),\n        color = _useState4[0],\n        setColor = _useState4[1];\n\n  let drawing = false;\n\n  const _useState5 = useState({\n    x: null,\n    y: null\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        points = _useState6[0],\n        setPoints = _useState6[1]; // Using the useEffect callback function to grab the canvas after render\n\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      setContext(canvasRef.current.getContext('2d'));\n    }\n  }, []);\n  console.log('Context', context);\n\n  const drawLine = (x0, y0, x1, y1, color, emit) => {\n    context.beginPath();\n    context.moveTo(x0, y0);\n    context.lineTo(x1, y1);\n    context.strokeStyle = color;\n    context.lineWidth = 2;\n    context.stroke();\n    context.closePath();\n  };\n\n  const mouseDown = e => {\n    drawing = true;\n    const coords = {\n      x: e.clientX,\n      y: e.clientY\n    };\n    setPoints(coords);\n  };\n\n  const mouseUp = e => {\n    // eslint-disable-next-line no-useless-return\n    if (!drawing) {\n      return;\n    }\n\n    drawing = false;\n    drawLine(points.x, points.y, e.clientX, e.clientY, color, true);\n  };\n\n  const mouseMove = e => {\n    // eslint-disable-next-line no-useless-return\n    if (!drawing) {\n      return;\n    }\n\n    const newCoords = {\n      x: e.clientX,\n      y: e.clientY\n    };\n    drawLine(points.x, points.y, _objectSpread({}, newCoords), color, true);\n    setPoints(newCoords);\n  };\n\n  console.log('Points', points);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      border: '1px solid black'\n    },\n    onMouseDown: mouseDown,\n    onMouseUp: mouseUp,\n    onMouseMove: mouseMove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }));\n};\n\nexport default Canvas;","map":{"version":3,"sources":["/home/hei/Documents/finals/JEK/client/src/components/Channel/Container/Canvas/Canvas.js"],"names":["React","useState","useRef","useEffect","Canvas","canvasRef","context","setContext","color","setColor","drawing","x","y","points","setPoints","current","getContext","console","log","drawLine","x0","y0","x1","y1","emit","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","closePath","mouseDown","e","coords","clientX","clientY","mouseUp","mouseMove","newCoords","border"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\n\nconst Canvas = () => {\n  const canvasRef = useRef(null);\n  const [context, setContext] = useState(null);\n  const [color, setColor] = useState('black');\n\n  let drawing = false;\n\n  const [points, setPoints] = useState({\n    x: null,\n    y: null,\n  });\n\n  // Using the useEffect callback function to grab the canvas after render\n  useEffect(() => {\n    if (canvasRef.current) {\n      setContext(canvasRef.current.getContext('2d'));\n    }\n  }, []);\n\n  console.log('Context', context);\n\n  const drawLine = (x0, y0, x1, y1, color, emit) => {\n    context.beginPath();\n    context.moveTo(x0, y0);\n    context.lineTo(x1, y1);\n    context.strokeStyle = color;\n    context.lineWidth = 2;\n    context.stroke();\n    context.closePath();\n  }; \n\n\n  const mouseDown = (e) => {\n    drawing = true;\n    const coords = {\n      x: e.clientX,\n      y: e.clientY,\n    };\n\n    setPoints(coords);\n  };\n\n  const mouseUp = (e) => {\n    // eslint-disable-next-line no-useless-return\n    if (!drawing) { return; }\n    drawing = false;\n    drawLine(points.x, points.y, e.clientX, e.clientY, color, true);\n  };\n\n  const mouseMove = (e) => {\n    // eslint-disable-next-line no-useless-return\n    if (!drawing) { return; }\n\n    const newCoords = {\n      x: e.clientX,\n      y: e.clientY,\n    };\n    drawLine(points.x, points.y, { ...newCoords }, color, true);\n    setPoints(newCoords);\n  };\n\n  console.log('Points', points);\n  return (\n    <div>\n      <canvas\n        ref={canvasRef}\n        style={{\n          border: '1px solid black',\n        }}\n        onMouseDown={mouseDown}\n        onMouseUp={mouseUp}\n        onMouseMove={mouseMove}\n\n      />\n    </div>\n  );\n};\n\nexport default Canvas;\n"]},"metadata":{},"sourceType":"module"}