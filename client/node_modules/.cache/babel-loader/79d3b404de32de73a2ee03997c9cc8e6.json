{"ast":null,"code":"var _jsxFileName = \"/home/hei/Documents/finals/JEK/client/src/components/Home/Channel/Modules/Canvas/Canvas.js\";\n\n/* eslint-disable no-return-assign */\nimport React, { Component } from 'react';\n\nclass Canvas extends Component {\n  // Different stroke styles to be used for user and guest\n  constructor(props) {\n    super(props);\n    this.isPainting = false;\n    this.userStrokeStyle = '#EE92C2';\n    this.guestStrokeStyle = '#F0C987';\n    this.line = [];\n    this.prevPos = {\n      offsetX: 0,\n      offsetY: 0\n    };\n    this.onMouseDown = this.onMouseDown.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n    this.endPaintEvent = this.endPaintEvent.bind(this);\n    this.sendLine = props.sendLine.bind(this);\n  }\n\n  componentDidMount() {\n    // Here we set up the properties of the canvas element.\n    this.canvas.width = 700;\n    this.canvas.height = 459;\n    this.ctx = this.canvas.getContext('2d');\n    this.ctx.lineJoin = 'round';\n    this.ctx.lineCap = 'round';\n    this.ctx.lineWidth = 5;\n  }\n\n  componentDidUpdate() {\n    const {\n      currentUser,\n      lines\n    } = this.props;\n\n    if (lines !== undefined) {\n      Object.values(lines).forEach(({\n        user,\n        line\n      }) => {\n        if (user !== currentUser) {\n          line.forEach(position => {\n            this.paint(position.start, position.stop, this.guestStrokeStyle);\n          });\n        }\n      });\n    }\n  }\n\n  onMouseDown({\n    nativeEvent\n  }) {\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    this.isPainting = true;\n    this.prevPos = {\n      offsetX,\n      offsetY\n    };\n  }\n\n  onMouseMove({\n    nativeEvent\n  }) {\n    if (this.isPainting) {\n      const {\n        offsetX,\n        offsetY\n      } = nativeEvent;\n      const offSetData = {\n        offsetX,\n        offsetY\n      }; // Set the start and stop position of the paint event.\n\n      const positionData = {\n        start: { ...this.prevPos\n        },\n        stop: { ...offSetData\n        }\n      }; // Add the position to the line array\n\n      this.line = this.line.concat(positionData);\n      this.paint(this.prevPos, offSetData, this.userStrokeStyle);\n    }\n  }\n\n  endPaintEvent() {\n    if (this.isPainting) {\n      this.isPainting = false;\n      this.sendPaintData();\n    }\n  }\n\n  paint(prevPos, currPos, strokeStyle) {\n    const {\n      offsetX,\n      offsetY\n    } = currPos;\n    const {\n      offsetX: x,\n      offsetY: y\n    } = prevPos;\n    this.ctx.beginPath();\n    this.ctx.strokeStyle = strokeStyle; // Move the the prevPosition of the mouse\n\n    this.ctx.moveTo(x, y); // Draw a line to the current position of the mouse\n\n    this.ctx.lineTo(offsetX, offsetY); // Visualize the line using the strokeStyle\n\n    this.ctx.stroke();\n    this.prevPos = {\n      offsetX,\n      offsetY\n    };\n  }\n\n  async sendPaintData() {\n    this.sendLine(this.line);\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"canvas\", {\n      // We use the ref attribute to get direct access to the canvas element.\n      ref: ref => this.canvas = ref,\n      style: {\n        background: 'black'\n      },\n      onMouseDown: this.onMouseDown,\n      onMouseLeave: this.endPaintEvent,\n      onMouseUp: this.endPaintEvent,\n      onMouseMove: this.onMouseMove,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Canvas;","map":{"version":3,"sources":["/home/hei/Documents/finals/JEK/client/src/components/Home/Channel/Modules/Canvas/Canvas.js"],"names":["React","Component","Canvas","constructor","props","isPainting","userStrokeStyle","guestStrokeStyle","line","prevPos","offsetX","offsetY","onMouseDown","bind","onMouseMove","endPaintEvent","sendLine","componentDidMount","canvas","width","height","ctx","getContext","lineJoin","lineCap","lineWidth","componentDidUpdate","currentUser","lines","undefined","Object","values","forEach","user","position","paint","start","stop","nativeEvent","offSetData","positionData","concat","sendPaintData","currPos","strokeStyle","x","y","beginPath","moveTo","lineTo","stroke","render","ref","background"],"mappings":"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","sourcesContent":["/* eslint-disable no-return-assign */\nimport React, { Component } from 'react';\n\nclass Canvas extends Component {\n      isPainting = false;\n\n      // Different stroke styles to be used for user and guest\n      userStrokeStyle = '#EE92C2';\n\n      guestStrokeStyle = '#F0C987';\n\n      line = [];\n\n      prevPos = { offsetX: 0, offsetY: 0 };\n\n      constructor(props) {\n        super(props);\n        this.onMouseDown = this.onMouseDown.bind(this);\n        this.onMouseMove = this.onMouseMove.bind(this);\n        this.endPaintEvent = this.endPaintEvent.bind(this);\n        this.sendLine = props.sendLine.bind(this);\n      }\n\n      componentDidMount() {\n        // Here we set up the properties of the canvas element.\n        this.canvas.width = 700;\n        this.canvas.height = 459;\n        this.ctx = this.canvas.getContext('2d');\n        this.ctx.lineJoin = 'round';\n        this.ctx.lineCap = 'round';\n        this.ctx.lineWidth = 5;\n      }\n\n      componentDidUpdate() {\n        const { currentUser, lines } = this.props;\n        if (lines !== undefined) {\n          Object.values(lines).forEach(({ user, line }) => {\n            if (user !== currentUser) {\n              line.forEach((position) => {\n                this.paint(position.start, position.stop, this.guestStrokeStyle);\n              });\n            }\n          });\n        }\n      }\n\n\n      onMouseDown({ nativeEvent }) {\n        const { offsetX, offsetY } = nativeEvent;\n        this.isPainting = true;\n        this.prevPos = { offsetX, offsetY };\n      }\n\n      onMouseMove({ nativeEvent }) {\n        if (this.isPainting) {\n          const { offsetX, offsetY } = nativeEvent;\n          const offSetData = { offsetX, offsetY };\n          // Set the start and stop position of the paint event.\n          const positionData = {\n            start: { ...this.prevPos },\n            stop: { ...offSetData },\n          };\n          // Add the position to the line array\n          this.line = this.line.concat(positionData);\n          this.paint(this.prevPos, offSetData, this.userStrokeStyle);\n        }\n      }\n\n      endPaintEvent() {\n        if (this.isPainting) {\n          this.isPainting = false;\n          this.sendPaintData();\n        }\n      }\n\n      paint(prevPos, currPos, strokeStyle) {\n        const { offsetX, offsetY } = currPos;\n        const { offsetX: x, offsetY: y } = prevPos;\n\n        this.ctx.beginPath();\n        this.ctx.strokeStyle = strokeStyle;\n        // Move the the prevPosition of the mouse\n        this.ctx.moveTo(x, y);\n        // Draw a line to the current position of the mouse\n        this.ctx.lineTo(offsetX, offsetY);\n        // Visualize the line using the strokeStyle\n        this.ctx.stroke();\n        this.prevPos = { offsetX, offsetY };\n      }\n\n      async sendPaintData() {\n        this.sendLine(this.line);\n      }\n\n      render() {\n        return (\n          <>\n            <canvas\n            // We use the ref attribute to get direct access to the canvas element.\n              ref={(ref) => (this.canvas = ref)}\n              style={{ background: 'black' }}\n              onMouseDown={this.onMouseDown}\n              onMouseLeave={this.endPaintEvent}\n              onMouseUp={this.endPaintEvent}\n              onMouseMove={this.onMouseMove}\n            />\n          </>\n        );\n      }\n}\nexport default Canvas;\n"]},"metadata":{},"sourceType":"module"}