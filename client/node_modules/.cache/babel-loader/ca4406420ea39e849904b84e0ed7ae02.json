{"ast":null,"code":"import _slicedToArray from \"/home/hei/Documents/finals/JEK/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/hei/Documents/finals/JEK/client/src/components/Channel/Container/Canvas/Canvas.js\";\n\n/* eslint-disable jsx-a11y/mouse-events-have-key-events */\n\n/* eslint-disable no-sequences */\nimport React, { useState, useRef, useEffect } from 'react';\nimport './Canvas.css';\n\nconst Canvas = () => {\n  // const canvasRef = useRef(null);\n  // const [context, setContext] = useState(null);\n  // let drawing = false;\n  // const points = {\n  //   color: 'black',\n  // };\n  // // Using the useEffect callback function to grab the canvas after render and setContext\n  // useEffect(() => {\n  //   if (canvasRef.current) {\n  //     setContext(canvasRef.current.getContext('2d'));\n  //   }\n  // }, []);\n  // const drawLine = (x0, y0, x1, y1, color, emit) => {\n  //   console.log(x0, y0, x1, y1, color, context);\n  //   context.beginPath();\n  //   context.moveTo(x0, y0);\n  //   context.lineTo(x1, y1);\n  //   context.strokeStyle = color;\n  //   context.lineWidth = 2;\n  //   context.stroke();\n  //   context.closePath();\n  // };\n  // const mouseDown = (e) => {\n  //   drawing = true;\n  //   points.x = e.clientX;\n  //   points.y = e.clientY;\n  // };\n  // const mouseUp = (e) => {\n  //   // eslint-disable-next-line no-useless-return\n  //   if (!drawing) { return; }\n  //   drawing = false;\n  //   drawLine(points.x, points.y, e.clientX, e.clientY, points.color, true);\n  // };\n  // const mouseMove = (e) => {\n  //   // eslint-disable-next-line no-useless-return\n  //   if (!drawing) { return; }\n  //   drawLine(points.x, points.y, e.clientX, e.clientY, points.color, true);\n  //   points.x = e.clientX;\n  //   points.y = e.clientY;\n  // };\n  // const throttle = (cb, delay) => {\n  //   let previousCall = new Date().getTime();\n  //   return () => {\n  //     const time = new Date().getTime();\n  //     if ((time - previousCall) >= delay) {\n  //       previousCall = time;\n  //       cb();\n  //     }\n  //   };\n  // };\n  const canvasRef = useRef(null);\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        context = _useState2[0],\n        setContext = _useState2[1];\n\n  let drawing = false;\n  const current = {\n    color: 'black'\n  };\n\n  function drawLine(x0, y0, x1, y1, color) {\n    context.beginPath();\n    context.moveTo(x0, y0);\n    context.lineTo(x1, y1);\n    context.strokeStyle = color;\n    context.lineWidth = 2;\n    context.stroke();\n    context.closePath();\n  }\n\n  function onMouseDown(e) {\n    drawing = true;\n    current.x = e.clientX;\n    current.y = e.clientY;\n  }\n\n  function onMouseUp(e) {\n    if (!drawing) {\n      return;\n    }\n\n    drawing = false;\n    drawLine(current.x, current.y, e.clientX, e.clientY, current.color, true);\n  }\n\n  function onMouseMove(e) {\n    if (!drawing) {\n      return;\n    }\n\n    drawLine(current.x, current.y, e.clientX, e.clientY, current.color, true);\n    current.x = e.clientX;\n    current.y = e.clientY;\n  } // limit the number of events per second\n\n\n  function throttle(callback, delay) {\n    let previousCall = new Date().getTime();\n    return function () {\n      const time = new Date().getTime();\n\n      if (time - previousCall >= delay) {\n        previousCall = time;\n        callback.apply(null, arguments);\n      }\n    };\n  } // Using the useEffect callback function to grab the canvas after render and setContext\n\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      setContext(canvasRef.current.getContext('2d'));\n      canvasRef.current.addEventListener('mousedown', onMouseDown, false);\n      canvasRef.current.addEventListener('mouseup', onMouseUp, false);\n      canvasRef.current.addEventListener('mouseout', onMouseUp, false);\n      canvasRef.current.addEventListener('mousemove', throttle(onMouseMove, 10), false);\n    }\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(\"canvas\", {\n    className: \"whiteboard\",\n    ref: canvasRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }));\n};\n\nexport default Canvas;","map":{"version":3,"sources":["/home/hei/Documents/finals/JEK/client/src/components/Channel/Container/Canvas/Canvas.js"],"names":["React","useState","useRef","useEffect","Canvas","canvasRef","context","setContext","drawing","current","color","drawLine","x0","y0","x1","y1","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","closePath","onMouseDown","e","x","clientX","y","clientY","onMouseUp","onMouseMove","throttle","callback","delay","previousCall","Date","getTime","time","apply","arguments","getContext","addEventListener"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/mouse-events-have-key-events */\n/* eslint-disable no-sequences */\nimport React, { useState, useRef, useEffect } from 'react';\nimport './Canvas.css';\n\nconst Canvas = () => {\n  // const canvasRef = useRef(null);\n  // const [context, setContext] = useState(null);\n\n  // let drawing = false;\n\n  // const points = {\n  //   color: 'black',\n  // };\n\n  // // Using the useEffect callback function to grab the canvas after render and setContext\n  // useEffect(() => {\n  //   if (canvasRef.current) {\n  //     setContext(canvasRef.current.getContext('2d'));\n  //   }\n  // }, []);\n\n  // const drawLine = (x0, y0, x1, y1, color, emit) => {\n  //   console.log(x0, y0, x1, y1, color, context);\n  //   context.beginPath();\n  //   context.moveTo(x0, y0);\n  //   context.lineTo(x1, y1);\n  //   context.strokeStyle = color;\n  //   context.lineWidth = 2;\n  //   context.stroke();\n  //   context.closePath();\n  // };\n\n  // const mouseDown = (e) => {\n  //   drawing = true;\n  //   points.x = e.clientX;\n  //   points.y = e.clientY;\n  // };\n\n  // const mouseUp = (e) => {\n  //   // eslint-disable-next-line no-useless-return\n  //   if (!drawing) { return; }\n  //   drawing = false;\n  //   drawLine(points.x, points.y, e.clientX, e.clientY, points.color, true);\n  // };\n\n  // const mouseMove = (e) => {\n  //   // eslint-disable-next-line no-useless-return\n  //   if (!drawing) { return; }\n  //   drawLine(points.x, points.y, e.clientX, e.clientY, points.color, true);\n  //   points.x = e.clientX;\n  //   points.y = e.clientY;\n  // };\n\n  // const throttle = (cb, delay) => {\n  //   let previousCall = new Date().getTime();\n  //   return () => {\n  //     const time = new Date().getTime();\n\n  //     if ((time - previousCall) >= delay) {\n  //       previousCall = time;\n  //       cb();\n  //     }\n  //   };\n  // };\n\n  const canvasRef = useRef(null);\n  const [context, setContext] = useState(null);\n\n  let drawing = false;\n\n  const current = {\n    color: 'black',\n  };\n\n  function drawLine(x0, y0, x1, y1, color) {\n    context.beginPath();\n    context.moveTo(x0, y0);\n    context.lineTo(x1, y1);\n    context.strokeStyle = color;\n    context.lineWidth = 2;\n    context.stroke();\n    context.closePath();\n  }\n\n  function onMouseDown(e) {\n    drawing = true;\n    current.x = e.clientX;\n    current.y = e.clientY;\n  }\n\n  function onMouseUp(e) {\n    if (!drawing) { return; }\n    drawing = false;\n    drawLine(current.x, current.y, e.clientX, e.clientY, current.color, true);\n  }\n\n  function onMouseMove(e) {\n    if (!drawing) { return; }\n    drawLine(current.x, current.y, e.clientX, e.clientY, current.color, true);\n    current.x = e.clientX;\n    current.y = e.clientY;\n  }\n\n  // limit the number of events per second\n  function throttle(callback, delay) {\n    let previousCall = new Date().getTime();\n    return function () {\n      const time = new Date().getTime();\n\n      if ((time - previousCall) >= delay) {\n        previousCall = time;\n        callback.apply(null, arguments);\n      }\n    };\n  }\n\n  // Using the useEffect callback function to grab the canvas after render and setContext\n  useEffect(() => {\n    if (canvasRef.current) {\n      setContext(canvasRef.current.getContext('2d'));\n      canvasRef.current.addEventListener('mousedown', onMouseDown, false);\n      canvasRef.current.addEventListener('mouseup', onMouseUp, false);\n      canvasRef.current.addEventListener('mouseout', onMouseUp, false);\n      canvasRef.current.addEventListener('mousemove', throttle(onMouseMove, 10), false);\n    }\n  });\n\n  return (\n    <div>\n      <canvas\n        className=\"whiteboard\"\n        ref={canvasRef}\n      />\n    </div>\n  );\n};\n\nexport default Canvas;\n"]},"metadata":{},"sourceType":"module"}